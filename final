#include <dht.h>

#define motor 7
#define enable 13
#define DHT11_PIN 11

dht DHT;

int latch=9;  //74HC595  pin 9 STCP
int clock=10; //74HC595  pin 10 SHCP
int data=8;   //74HC595  pin 8 DS
const int digitPins[4] = {2,3,4,5}; 
double temp = 0;
int tens = 0;
int holder = 0;


unsigned char segdisplay[12]=
{0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111,0b00111001,0b01100011}; // 0-9, C, degree symbol

typedef struct task {
  int state;
  unsigned long period;
  unsigned long elapsedTime;
  int (*TickFct)(int);
    
} task;

int delay_gcd;
const unsigned short tasksNum = 3;
task tasks[tasksNum];

void Display(unsigned char num1, unsigned char num2, unsigned char num3, unsigned char num4)
{

  for(int i = 0 ; i < 4 ; ++i)
  digitalWrite(digitPins[i], HIGH);

  digitalWrite(latch,LOW);
  shiftOut(data,clock,MSBFIRST,segdisplay[num1]);
  digitalWrite(latch,HIGH);

  digitalWrite(digitPins[0], LOW);
  delay(1);
  digitalWrite(digitPins[0], HIGH);



  digitalWrite(latch,LOW);
  shiftOut(data,clock,MSBFIRST,segdisplay[num2]);
  digitalWrite(latch,HIGH);

  digitalWrite(digitPins[1], LOW);
  delay(1);
  digitalWrite(digitPins[1], HIGH);

  digitalWrite(latch,LOW);
  shiftOut(data,clock,MSBFIRST,segdisplay[num3]);
  digitalWrite(latch,HIGH);

  digitalWrite(digitPins[2], LOW);
 delay(1);
  digitalWrite(digitPins[2], HIGH);

  digitalWrite(latch,LOW);
  shiftOut(data,clock,MSBFIRST,segdisplay[num4]);
  digitalWrite(latch,HIGH);

  digitalWrite(digitPins[3], LOW);
  delay(1);
  digitalWrite(digitPins[3], HIGH);

}

enum SM1_States { SM1_INIT, SM1_Sense};
int SM1_Tick(int state){
    //Read thing
    switch(state){ // State transitions
      case SM1_INIT:
         //State Transition
            state = SM1_Sense;
        break;
      case SM1_Sense:
          state = SM1_Sense;
         //State Transition
        break;
      }
    switch(state){ // State Action
      case SM1_INIT:
         //State Action
        break;
      case SM1_Sense:
            int chk = DHT.read11(DHT11_PIN);
            Serial.print("Temperature = ");
            temp = DHT.temperature; 
            Serial.println(temp);
            Serial.print("Humidity = ");
            Serial.println(DHT.humidity);
        break;
      }

    return state;
}

enum SM2_States { SM2_INIT, SM2_Display};
int SM2_Tick(int state){
    //Read thing
    switch(state){ // State transitions
      case SM2_INIT:
         //State Transition
            state = SM2_Display;
        break;
      case SM2_Display:
            state = SM2_Display;
        //State Transition
        break;
    }
    switch(state){ // State Action
      case SM2_INIT:
         //State Action
        break;
      case SM2_Display:
            
            
            tens = (int)temp;
            Display(tens/10, tens%10, 11, 10);
            Serial.println(tens/10);
            Serial.println(tens%10);
            
            
        break;
    }

    return state;
}

enum SM3States { SM3_INIT, SM3_FanOn, SM3_FanOff};
int SM3_Tick(int state){
    //Read thing
    switch(state){ // State transitions
      case SM3_INIT:
         //State Transition
            
            state = SM3_FanOff;
        break;
      case SM3_FanOff:
            if(temp > 25) 
            state = SM3_FanOn;
        //State Transition
        break;

        case SM3_FanOn:
            if(temp <= 25) 
            state = SM3_FanOff;
        //State Transition
        break;
    }
    switch(state){ // State Action
      case SM3_INIT:
         //State Action
        break;
      case SM3_FanOff:
            
      analogWrite(enable,0);
      digitalWrite(motor, HIGH);
      digitalWrite(6, LOW);
        break;

        case SM3_FanOn:
            
      analogWrite(enable,255);
      digitalWrite(motor, HIGH);
      digitalWrite(6, LOW);
        break;
    }

    return state;
}






void setup() {
  pinMode(latch,OUTPUT);
  pinMode(clock,OUTPUT);
  pinMode(data,OUTPUT);
  for (int i = 0; i < 4; i++)
  pinMode(digitPins[i],OUTPUT);
  pinMode(motor, OUTPUT);
  pinMode(enable, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(DHT11_PIN, INPUT);
  Serial.begin(9600);


  unsigned char i = 0;
  tasks[i].state = SM1_INIT;
  tasks[i].period = 10;
  tasks[i].elapsedTime = 0;
  tasks[i].TickFct = &SM1_Tick;
  i++;
  tasks[i].state = SM2_INIT;
  tasks[i].period = 10;
  tasks[i].elapsedTime = 0;
  tasks[i].TickFct = &SM2_Tick;
  i++;
  tasks[i].state = SM3_INIT;
  tasks[i].period = 10;
  tasks[i].elapsedTime = 0;
  tasks[i].TickFct = &SM3_Tick;
  

  delay_gcd = 500; // GCD

}



void loop() {
  // put your main code here, to run repeatedly:
  unsigned char i;
  for (i = 0; i < tasksNum; ++i) {
     if ( (millis() - tasks[i].elapsedTime) >= tasks[i].period) {
        tasks[i].state = tasks[i].TickFct(tasks[i].state);
        tasks[i].elapsedTime = millis(); // Last time this task was ran
      
     }
   }
}
